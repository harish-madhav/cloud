index.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dropbox File Manager</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        h1 {
            color: #333;
        }

        form {
            margin-bottom: 20px;
        }

        input[type="file"],
        input[type="text"],
        button {
            margin-right: 10px;
        }

        .file-list {
            margin-top: 20px;
        }

        .file-item {
            margin-bottom: 10px;
        }

        .file-item button {
            margin-left: 10px;
        }
    </style>
</head>

<body>
    <h1>Dropbox File Manager</h1>

    <h2>Upload Image to Dropbox</h2>
    <form id="uploadForm" enctype="multipart/form-data">
        <input type="file" name="file" accept="image/*" required />
        <button type="submit">Upload</button>
    </form>
    <div id="uploadMessage"></div>

    <h2>Delete Image from Dropbox</h2>
    <form id="deleteForm">
        <input type="text" name="filename" placeholder="Enter filename to delete" required />
        <button type="submit">Delete</button>
    </form>
    <div id="deleteMessage"></div>

    <h2>Dropbox Files</h2>
    <div id="fileList" class="file-list"></div>

    <script>
        async function fetchFileList() {
            const response = await fetch('/files');
            const files = await response.json();
            const fileList = document.getElementById('fileList');
            fileList.innerHTML = '';

            if (files.length === 0) {
                fileList.textContent = 'No files found.';
                return;
            }

            files.forEach(file => {
                const div = document.createElement('div');
                div.className = 'file-item';
                div.textContent = file.name;

                const downloadButton = document.createElement('button');
                downloadButton.textContent = 'Download';
                downloadButton.onclick = () => downloadFile(file.name);

                div.appendChild(downloadButton);
                fileList.appendChild(div);
            });
        }

        async function downloadFile(filename) {
            const response = await fetch(`/download/${filename}`);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        document.getElementById('uploadForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData(event.target);
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData,
            });

            const messageDiv = document.getElementById('uploadMessage');
            if (response.ok) {
                messageDiv.textContent = 'File uploaded successfully';
                messageDiv.style.color = 'green';
                await fetchFileList();
            } else {
                const errorText = await response.text();
                messageDiv.textContent = `Error: ${errorText}`;
                messageDiv.style.color = 'red';
            }
        });

        document.getElementById('deleteForm').addEventListener('submit', async (event) => {
            event.preventDefault();

            const filename = event.target.filename.value;
            const response = await fetch('/delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ filename }),
            });

            const messageDiv = document.getElementById('deleteMessage');
            if (response.ok) {
                messageDiv.textContent = 'File deleted successfully';
                messageDiv.style.color = 'green';
                await fetchFileList();
            } else {
                const errorText = await response.text();
                messageDiv.textContent = `Error: ${errorText}`;
                messageDiv.style.color = 'red';
            }
        });

        // Fetch the file list on page load
        fetchFileList();
    </script>
</body>

</html>


server.js
const express = require('express');
const multer = require('multer');
const { Dropbox } = require('dropbox');
const fs = require('fs');
require('dotenv').config();
const fetch = require('isomorphic-fetch'); // Required for Dropbox SDK

const app = express();
const upload = multer({ dest: 'uploads/' });

// Initialize Dropbox client
const dropbox = new Dropbox({
    accessToken: process.env.DROPBOX_ACCESS_TOKEN,
    fetch: fetch,
});

// Middleware for parsing JSON requests
app.use(express.json());
app.use(express.static('public'));

// Handle photo upload
app.post('/upload', upload.single('file'), async (req, res) => {
    try {
        await dropbox.filesUpload({
            path: '/' + req.file.originalname,
            contents: fs.readFileSync(req.file.path),
        });

        // Delete the local file after uploading
        fs.unlinkSync(req.file.path);
        res.status(200).send('File uploaded successfully');
    } catch (err) {
        console.error('Error uploading file:', err);
        res.status(500).send('Error uploading file');
    }
});

// Handle photo deletion
app.post('/delete', async (req, res) => {
    const { filename } = req.body;

    try {
        await dropbox.filesDeleteV2({
            path: '/' + filename,
        });
        res.status(200).send('File deleted successfully');
    } catch (err) {
        console.error('Error deleting file:', err);
        res.status(500).send('Error deleting file');
    }
});

// Fetch list of files from Dropbox
app.get('/files', async (req, res) => {
    try {
        const response = await dropbox.filesListFolder({ path: '' });
        const files = response.result.entries.map(entry => ({
            name: entry.name,
        }));
        res.status(200).json(files);
    } catch (err) {
        console.error('Error listing files:', err);
        res.status(500).send('Error listing files');
    }
});

// Handle file download
app.get('/download/:filename', async (req, res) => {
    const { filename } = req.params;

    try {
        const response = await dropbox.filesDownload({ path: '/' + filename });
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.status(200).send(response.result.fileBinary);
    } catch (err) {
        console.error('Error downloading file:', err);
        res.status(500).send('Error downloading file');
    }
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});



Readme 
npm init -y
npm install express multer dropbox dotenv
npm install isomorphic-fetch




token
PORT:3000




dir structure:

public->index.html

uploads->

server.js
